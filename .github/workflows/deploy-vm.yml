name: Deploy Azure VM with Terraform

on:
  push:
    branches:
      main
  workflow_dispatch:


jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev 

    env:
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
      # commented, as reference removed from provider settings in main.tf
      # TF_VAR_client_id: ${{ vars.ARM_CLIENT_ID }}
      # TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      # TF_VAR_tenant_id: ${{vars.ARM_TENANT_ID }}
      # TF_VAR_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Ensure Terraform backend storage exists
        run: |
          az login --service-principal \
            --username "$ARM_CLIENT_ID" \
            --password "$ARM_CLIENT_SECRET" \
            --tenant "$ARM_TENANT_ID"

          az account set --subscription "$ARM_SUBSCRIPTION_ID"

          RG_NAME="rg-terraform-backend"
          STORAGE_ACCOUNT="tfstatebackendaj"
          CONTAINER_NAME="tfstate"
          LOCATION="westeurope"

          echo "✅ Checking or creating Resource Group..."
          az group create --name $RG_NAME --location $LOCATION

          echo "✅ Checking or creating Storage Account..."
          if ! az storage account show --name $STORAGE_ACCOUNT --resource-group $RG_NAME &> /dev/null; then
            az storage account create \
              --name $STORAGE_ACCOUNT \
              --resource-group $RG_NAME \
              --location $LOCATION \
              --sku Standard_LRS \
              --encryption-services blob
          fi

          echo "✅ Checking or creating Blob Container..."
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT \
            --resource-group $RG_NAME \
            --query "[0].value" -o tsv)

          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT \
            --account-key $STORAGE_KEY


      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt -check -recursive || echo "::warning::Formatting issues detected"

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        # env:
        #   ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        #   ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        #   ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        #   ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}


      - name: Show Terraform Plan (preview)
        run: terraform show -no-color tfplan

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan

  destroy:
    name: Destroy Terraform Resources
    runs-on: ubuntu-latest
    needs: deploy  # ensures it runs after the deploy job
    environment:
      name: destroy  # environment with approval gate
      url: https://portal.azure.com/  # optional: adds a button in UI

    env:
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Ensure Terraform backend storage exists
        run: |
          az login --service-principal \
            --username "$ARM_CLIENT_ID" \
            --password "$ARM_CLIENT_SECRET" \
            --tenant "$ARM_TENANT_ID"

          az account set --subscription "$ARM_SUBSCRIPTION_ID"

          RG_NAME="rg-terraform-backend"
          STORAGE_ACCOUNT="tfstatebackendaj"
          CONTAINER_NAME="tfstate"
          LOCATION="westeurope"

          az group create --name $RG_NAME --location $LOCATION
          if ! az storage account show --name $STORAGE_ACCOUNT --resource-group $RG_NAME &> /dev/null; then
            az storage account create \
              --name $STORAGE_ACCOUNT \
              --resource-group $RG_NAME \
              --location $LOCATION \
              --sku Standard_LRS \
              --encryption-services blob
          fi
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT \
            --resource-group $RG_NAME \
            --query "[0].value" -o tsv)
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT \
            --account-key $STORAGE_KEY

      - name: Terraform Init (with backend)
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

