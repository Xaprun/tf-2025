name: Deploy Azure VM with Terraform

on:
  push:
    branches:
      main
  workflow_dispatch:
    inputs:
      env_name:
        description: "Terraform environment (dev or prod)"
        required: true
        default: dev
        type: choice
        options:
          - dev
          - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev 

    env:
      ENV_NAME: ${{ github.event.inputs.env_name || 'dev' }}
      ENV_DIR: envs/${{ github.event.inputs.env_name }}
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}

      
    steps:
      - name: Validate environment directory exists
        run: |
          if [ ! -d "${{ env.ENV_DIR }}" ]; then
            echo "❌ Directory ${{ env.ENV_DIR }} does not exist."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v3


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3


      - name: Ensure Terraform backend storage exists
        working-directory: ${{ env.ENV_DIR }}
        run: |
          az login --service-principal \
            --username "$ARM_CLIENT_ID" \
            --password "$ARM_CLIENT_SECRET" \
            --tenant "$ARM_TENANT_ID"

          az account set --subscription "$ARM_SUBSCRIPTION_ID"

          RG_NAME="rg-terraform-backend"
          STORAGE_ACCOUNT="tfstatebackendaj"
          CONTAINER_NAME="tfstate"
          LOCATION="westeurope"

          echo "✅ Checking or creating Resource Group..."
          az group create --name $RG_NAME --location $LOCATION

          echo "✅ Checking or creating Storage Account..."
          if ! az storage account show --name $STORAGE_ACCOUNT --resource-group $RG_NAME &> /dev/null; then
            az storage account create \
              --name $STORAGE_ACCOUNT \
              --resource-group $RG_NAME \
              --location $LOCATION \
              --sku Standard_LRS \
              --encryption-services blob
          fi

          echo "✅ Checking or creating Blob Container..."
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT \
            --resource-group $RG_NAME \
            --query "[0].value" -o tsv)

          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT \
            --account-key $STORAGE_KEY


      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.ENV_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.ENV_DIR }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive || echo "::warning::Formatting issues detected"
        working-directory: ${{ env.ENV_DIR }}

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        working-directory: ${{ env.ENV_DIR }}


      - name: Show Terraform Plan (preview)
        run: terraform show -no-color tfplan
        working-directory: ${{ env.ENV_DIR }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: ${{ env.ENV_DIR }}

  destroy:
    name: Destroy Terraform Resources
    runs-on: ubuntu-latest
    needs: deploy  # ensures it runs after the deploy job
    environment:
      name: destroy  # environment with approval gate
      url: https://portal.azure.com/  # optional: adds a button in UI

    env:
      ENV_NAME: ${{ github.event.inputs.env_name || 'dev' }} # to avoid issue with commit 
      ENV_DIR: env/${{ github.event.inputs.env_name }}
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Ensure Terraform backend storage exists
        working-directory: ${{ env.ENV_DIR }}
        run: |
          az login --service-principal \
            --username "$ARM_CLIENT_ID" \
            --password "$ARM_CLIENT_SECRET" \
            --tenant "$ARM_TENANT_ID"

          az account set --subscription "$ARM_SUBSCRIPTION_ID"

          RG_NAME="rg-terraform-backend"
          STORAGE_ACCOUNT="tfstatebackendaj"
          CONTAINER_NAME="tfstate"
          LOCATION="westeurope"

          az group create --name $RG_NAME --location $LOCATION
          if ! az storage account show --name $STORAGE_ACCOUNT --resource-group $RG_NAME &> /dev/null; then
            az storage account create \
              --name $STORAGE_ACCOUNT \
              --resource-group $RG_NAME \
              --location $LOCATION \
              --sku Standard_LRS \
              --encryption-services blob
          fi
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT \
            --resource-group $RG_NAME \
            --query "[0].value" -o tsv)
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT \
            --account-key $STORAGE_KEY

      - name: Terraform Init (with backend)
        working-directory: ${{ env.ENV_DIR }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: ${{ env.ENV_DIR }}
        run: terraform destroy -auto-approve

